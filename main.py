import telebot
from telebot import types
import os
import json
import uuid

TOKEN = "7987776972:AAFcUZ3Tf4GBeLl4mONaQiHV2MqDr3qz8r8"
ADMIN_ID = 465513095
DATA_FILE = "data.json"
FILES_DIR = "files"

bot = telebot.TeleBot(TOKEN)

os.makedirs(FILES_DIR, exist_ok=True)
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, "w") as f:
        json.dump([], f)

def load_schemes():
    with open(DATA_FILE) as f:
        return json.load(f)

def save_schemes(schemes):
    with open(DATA_FILE, "w") as f:
        json.dump(schemes, f)

@bot.message_handler(commands=['start'])
def start(message):
    schemes = load_schemes()
    markup = types.InlineKeyboardMarkup()
    for scheme in schemes:
        markup.add(types.InlineKeyboardButton(f"{scheme['title']} ‚Äî {scheme['price']}‚ÇΩ", callback_data=f"buy_{scheme['id']}"))
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ö–µ–º—É:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("buy_"))
def handle_buy(call):
    scheme_id = call.data.split("_")[1]
    schemes = load_schemes()
    for scheme in schemes:
        if scheme["id"] == scheme_id:
            msg = f"üìÑ <b>{scheme['title']}</b>\n\n{scheme['desc']}\n\nüí∞ –¶–µ–Ω–∞: {scheme['price']}‚ÇΩ\n\n‚ùó–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://www.donationalerts.com/r/danil222711\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—é–¥–∞."
            bot.send_message(call.message.chat.id, msg, parse_mode='HTML')
            return

@bot.message_handler(content_types=['photo', 'document'])
def handle_payment(message):
    if message.from_user.username:
        user = f"@{message.from_user.username}"
    else:
        user = f"id:{message.from_user.id}"
    bot.send_message(ADMIN_ID, f"üßæ –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ—Ç {user}")
    bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)

@bot.message_handler(commands=['–≤—ã–¥–∞—Ç—å'])
def issue_scheme(message):
    if message.from_user.id != ADMIN_ID:
        return
    parts = message.text.strip().split()
    if len(parts) != 3:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π: /–≤—ã–¥–∞—Ç—å @username scheme_id")
        return
    username, scheme_id = parts[1], parts[2]
    schemes = load_schemes()
    for scheme in schemes:
        if scheme["id"] == scheme_id:
            path = os.path.join(FILES_DIR, scheme["file"])
            with open(path, "rb") as f:
                bot.send_document(username, f)
            return

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ö–µ–º—É", "üìÇ –°–ø–∏—Å–æ–∫ —Å—Ö–µ–º", "‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Ö–µ–º—É")
    bot.send_message(message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞:", reply_markup=markup)

admin_state = {}

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ö–µ–º—É")
def add_title_step(message):
    admin_state[message.chat.id] = {"step": "title"}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã:")

@bot.message_handler(func=lambda msg: admin_state.get(msg.chat.id, {}).get("step") == "title")
def add_desc_step(message):
    admin_state[message.chat.id]["title"] = message.text
    admin_state[message.chat.id]["step"] = "desc"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ö–µ–º—ã:")

@bot.message_handler(func=lambda msg: admin_state.get(msg.chat.id, {}).get("step") == "desc")
def add_price_step(message):
    admin_state[message.chat.id]["desc"] = message.text
    admin_state[message.chat.id]["step"] = "price"
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:")

@bot.message_handler(func=lambda msg: admin_state.get(msg.chat.id, {}).get("step") == "price")
def add_file_step(message):
    try:
        price = int(message.text)
        admin_state[message.chat.id]["price"] = price
        admin_state[message.chat.id]["step"] = "file"
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å—Ö–µ–º—ã (PDF, ZIP –∏ —Ç.–¥.):")
    except ValueError:
        bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

@bot.message_handler(content_types=['document'], func=lambda msg: admin_state.get(msg.chat.id, {}).get("step") == "file")
def save_scheme(message):
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    unique_id = str(uuid.uuid4())[:8]
    filename = f"{unique_id}_{message.document.file_name}"
    filepath = os.path.join(FILES_DIR, filename)
    with open(filepath, "wb") as f:
        f.write(downloaded_file)

    data = admin_state.pop(message.chat.id)
    scheme = {
        "id": unique_id,
        "title": data["title"],
        "desc": data["desc"],
        "price": data["price"],
        "file": filename
    }
    schemes = load_schemes()
    schemes.append(scheme)
    save_schemes(schemes)
    bot.send_message(message.chat.id, "‚úÖ –°—Ö–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

@bot.message_handler(func=lambda msg: msg.text == "üìÇ –°–ø–∏—Å–æ–∫ —Å—Ö–µ–º")
def list_schemes(message):
    schemes = load_schemes()
    text = "üìÑ –°–ø–∏—Å–æ–∫ —Å—Ö–µ–º:\n"
    for s in schemes:
        text += f"{s['id']}: {s['title']} ({s['price']}‚ÇΩ)\n"
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Å—Ö–µ–º—É")
def ask_id_to_delete(message):
    schemes = load_schemes()
    text = "‚ùå –í–≤–µ–¥–∏—Ç–µ ID —Å—Ö–µ–º—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
    for s in schemes:
        text += f"{s['id']}: {s['title']}\n"
    admin_state[message.chat.id] = {"step": "delete"}
    bot.send_message(message.chat.id, text)

@bot.message_handler(func=lambda msg: admin_state.get(msg.chat.id, {}).get("step") == "delete")
def delete_scheme(message):
    scheme_id = message.text.strip()
    schemes = load_schemes()
    schemes = [s for s in schemes if s["id"] != scheme_id]
    save_schemes(schemes)
    admin_state.pop(message.chat.id)
    bot.send_message(message.chat.id, "‚úÖ –°—Ö–µ–º–∞ —É–¥–∞–ª–µ–Ω–∞ (–µ—Å–ª–∏ –±—ã–ª–∞).")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.polling()
